def get_next_password(self, vendor: str) -> Optional[Dict[str, Any]]:
    """
    Get the next available password for a vendor and mark it as used.
    """
    vendor = vendor.lower()
    
    try:
        # Find vendor row
        row_index = self.vendor_map.get(vendor)
        if row_index is None:
            logger.warning(f"Vendor not found: {vendor}")
            return None
            
        # Get the row data
        row = self.password_data[row_index]
        
        # Find the first unused password (colunas B a F, índices 1 a 5)
        password_index = None
        password_value = None
        
        # Verifica cada uma das 5 colunas de senha
        for i in range(1, 6):
            # Verifica se a senha não está usada (coluna G)
            if len(row) > 6 and row[6] != "Usada":
                # Verifica se há uma senha válida nessa coluna
                if i < len(row) and row[i] and row[i].strip():
                    password_index = i
                    password_value = row[i]
                    break
                    
        if password_index is not None:
            # Mark as used
            self.sheets_service.mark_password_as_used(row_index + 1)  # +1 for 1-based row index
            
            # Update our local data
            if len(row) <= 6:
                # Extend row if needed
                row.extend([''] * (7 - len(row)))
            row[6] = "Usada"
            
            # Log that we're automatically sending this password
            logger.info(f"Automatically sending password '{password_value}' for vendor '{row[0]}'")
            
            return {
                "vendor": row[0],
                "password": password_value,
                "password_number": password_index,
                "row_index": row_index + 1
            }
        else:
            logger.warning(f"No available passwords for vendor: {vendor}")
            return None
    # ... resto da função continua igual
